?start: value

?value: [key_type_value (expr_end value)* ] | named_object*

named_object: var_name l_brace NEWLINE* [value (expr_end value)* ] r_brace NEWLINE*

key_type_value: var_name t_colon var_type t_equal var_value //expr_end

// encountered object names like this, should it work? (' ','/','+','&'): unit respawn{
var_name: /[a-zA-Z0-9_\-][a-zA-Z0-9_\-\.]*/
      | "\"" /[a-zA-Z0-9_\-\[\]][a-zA-Z0-9_\- \!\?\.\[\]\(\)\,]*/ "\""
   // | "\"" [ESCAPED_STRING (" " ESCAPED_STRING)*] "\""

var_type: "t" | "i" | "r" | "p2" | "p3" | "p4" | "ip2" | "ip3" | "b" | "c" | "m" | "i64"

var_value: /\"[\'\w\/\.\_\;\-\+\*\=\ \(\)\!\,\?\[\]\@\#\:\\\&\%]*\"/
         | /\'[\"\w\/\.\_\;\-\+\*\=\ \(\)\!\,\?\[\]\@\#\:\\\&\%]*\'/
    | numbers_list
    | "yes"
    | "no"
    | value_array

numbers_list: [SIGNED_NUMBER ("," SIGNED_NUMBER)* ]
value_array: l_sqb value_array_el* r_sqb
value_array_el: l_sqb numbers_list r_sqb


expr_end: ";" | NEWLINE
t_colon: ":"
t_equal: "="
l_brace: "{"
r_brace: "}"
l_sqb: "["
r_sqb: "]"

%import common.ESCAPED_STRING
%import common.NEWLINE
%import common.SIGNED_NUMBER
%import common.WS_INLINE

%ignore WS_INLINE